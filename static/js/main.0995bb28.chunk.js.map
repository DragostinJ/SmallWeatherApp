{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js","useLocation.js"],"names":["summerConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_summerConfig$season","react_default","a","createElement","className","concat","Spinner","msg","defaultProps","message","ReactDOM","render","content","_useLocation","_useState","useState","_useState2","Object","slicedToArray","setLat","_useState3","_useState4","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","_useLocation2","src_SeasonDisplay_0","src_Spinner","document","querySelector"],"mappings":"gKAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAM,cACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,qBACNC,SAAU,eAuBHE,EAbO,SAAAC,GACpB,IARiBC,EAAKC,EAQhBC,GARWF,EAQQD,EAAMC,KARTC,GAQc,IAAIE,MAAOC,YAPnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAGDK,EAINZ,EAAaS,GAA/BP,EAJwBU,EAIxBV,KAAMC,EAJkBS,EAIlBT,SACX,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAChCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAC,OAAKd,EAAL,6BACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,GAAAC,OAAKd,EAAL,gCC3BZe,EAAU,SAACZ,GACf,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBV,EAAMa,OAKjDD,EAAQE,aAAe,CACrBC,QAAS,cAEIH,QC+BfI,IAASC,OAAOV,EAAAC,EAAAC,cAvCJ,WAAM,IAEdS,EAFcC,ECHlB,WAAqB,IAAAC,EACKC,mBAAS,MADdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACVnB,EADUqB,EAAA,GACLG,EADKH,EAAA,GAAAI,EAEsBL,mBAAS,IAF/BM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAEVE,EAFUD,EAAA,GAEIE,EAFJF,EAAA,GAUnB,OANAG,oBAAU,WACRC,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GAAQ,OAAIV,EAAOU,EAASC,OAAOC,WACnC,SAAAC,GAAG,OAAIT,EAAgBS,EAAIvB,YAE5B,IACI,CAACd,EAAK2B,GDNcW,GADXC,EAAAjB,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACVlB,EADUuC,EAAA,GACLZ,EADKY,EAAA,GAUhB,OANAtB,EADCU,EACSrB,EAAAC,EAAAC,cAAA,qBAAamB,GACd3B,EACCM,EAAAC,EAAAC,cAACgC,EAAD,CAAexC,IAAKA,IAEpBM,EAAAC,EAAAC,cAACiC,EAAD,CAAS7B,IAAI,mCAEhBN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcQ,IA6BtB,MAASyB,SAASC,cAAc","file":"static/js/main.0995bb28.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './SeasonDisplay.css'\r\n\r\nconst summerConfig = {\r\n    summer: {\r\n        text: \"Its hot out\",\r\n        iconName: \"sun\"\r\n    },\r\n    winter: {\r\n        text: \"Its cold out there\",\r\n        iconName: \"snowflake\"\r\n    }\r\n}\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\nconst SeasonDisplay = props => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n//   const text = season === \"winter\" ? \"Its chilly\" : \"Its hot\";\r\n//   const icon = season === \"winter\" ? \"snowflake\" : \"sun\";\r\nconst {text, iconName} = summerConfig[season]\r\n  return (\r\n    <div className={`season-display ${season}`}>\r\n      <i className={`${iconName} icon-left massive icon`} />\r\n      <h1>{text}</h1>\r\n      <i className={`${iconName} icon-right massive icon`} />\r\n    </div>\r\n  );\r\n};\r\nexport default SeasonDisplay;\r\n","import React from \"react\";\r\n\r\nconst Spinner = (props) => {\r\n  return (\r\n    <div className=\"ui active dimmer\">\r\n      <div className=\"ui big text loader\">{props.msg}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSpinner.defaultProps = {\r\n  message: 'Loading...'\r\n}\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\nimport useLocation from './useLocation'\r\nconst App = () => {\r\n const [lat, errorMessage] = useLocation()\r\nlet content;\r\nif(errorMessage) {\r\n  content = <div>Error: {errorMessage}</div>\r\n} else if (lat) {\r\n  content = <SeasonDisplay lat={lat} />;\r\n} else (\r\n  content = <Spinner msg=\"Pleace accept location request\" />\r\n)\r\n  return <div className=\"border red\">{content}</div>\r\n}\r\n// class App extends React.Component {\r\n//   state = { lat: null, errorMessage: \"\" };\r\n\r\n//   componentDidMount() {\r\n//     window.navigator.geolocation.getCurrentPosition(\r\n//       position => this.setState({ lat: position.coords.latitude }),\r\n//       err => this.setState({ errorMessage: err.message })\r\n//     );\r\n//   }\r\n//   componentDidUpdate() {\r\n//     console.log(\"Component did update\");\r\n//   }\r\n//   renderContent() {\r\n//     if (this.state.errorMessage && !this.state.lat) {\r\n//       return <div>Error: {this.state.errorMessage}</div>;\r\n//     }\r\n//     if (!this.state.errorMessage && this.state.lat) {\r\n//       return <SeasonDisplay lat={this.state.lat} />;\r\n//     }\r\n//     return <Spinner msg=\"Pleace accept location request\" />;\r\n//   }\r\n\r\n//   render() {\r\n//     return <div className=\"border red\">{this.renderContent()}</div>;\r\n//   }\r\n// }\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n","import {useState, useEffect} from 'react'\r\n\r\nexport default () => {\r\n    const [lat, setLat] = useState(null)\r\n    const [errorMessage, setErrorMessage] =useState('')\r\n  \r\n  useEffect(()=> {\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      position => setLat(position.coords.latitude ),\r\n      err => setErrorMessage(err.message )\r\n    );\r\n  }, [])\r\n  return [lat, errorMessage]\r\n}\r\n"],"sourceRoot":""}